test$genres[[2]][1]
t(test)
df <- data.frame("A" = c(1,2,3), "B" = 1:5)
df <- data.frame("A" = c(1,2,3), "B" = 3:6)
df <- data.frame("A" = c(1,2,3), "B" = 3:5)
df
db
db$insert(df)
df
saveData <- function(data){
db <- mongo(collection = collectionName,
url = options()$mongodb$url,
db = databaseName)
#Insert Data into Collection
data <- as.data.frame(t(data))
return(db$insert(data))
}
saveData(df)
df
df
saveData <- function(data){
db <- mongo(collection = collectionName,
url = options()$mongodb$url,
db = databaseName)
#Insert Data into Collection
data <- as.data.frame(t(data))
res <- db$insert(data)
return(res)
}
df
saveData(df)
as.data.frame(df)
library(mongolite)
options(mongodb = list(
"username" = "Julian",
"password" = "Julian1994",
"url" = "mongodb+srv://Julian:Julian1994@cluster0-hfwvj.mongodb.net/test?retryWrites=true&w=majority"
))
#mongolite - macht aus jeder Zeile des Dataframes ein Dokument
# -> dabei werden Listen zu Arrays, nested Documents werden nicht eingesetzt
databaseName <- "sample_mflix"
collectionName <- "movies"
saveData <- function(data){
db <- mongo(collection = collectionName,
url = options()$mongodb$url,
db = databaseName)
#Insert Data into Collection
data <- as.data.frame(t(data))
res <- db$insert(data)
return(res)
}
df
db$insert(df)
t(data)
t(df)
saveDF <- function(data){
db <- mongo(collection = collectionName,
url = options()$mongodb$url,
db = databaseName)
#Insert Data into Collection
res <- db$insert(data)
return(res)
}
saveDF(df)
shiny::runApp()
test
test$imdb
test$imdb$rating
"test"+str(2)
"test"&str(2)
"test"str(2)
paste("test",str(2))
paste("test",str(2))
concat("test",str(2)
)
concat("a","b")
paste0("tet","t")
query <- paste0('{imdb.rating":{$gte:',str(5),'}}')
query
query <- paste0('{imdb.rating":{$gte:',5,'}}')
query
query <- paste0('{"imdb.rating":{$gte:',5,'}}')
db$find(query)
query
query <- paste0('{"imdb.rating":{"$gte:"',5,'}}')
db$find(query)
query <- paste0('{"imdb.rating":{"$gte":',5,'}}')
db$find(query)
runApp()
runApp()
runApp()
#MongoDB
options(mongodb = list(
"username" = "Julian",
"password" = "Julian1994",
"url" = "mongodb+srv://Julian:Julian1994@cluster0-hfwvj.mongodb.net/test?retryWrites=true&w=majority"
))
databaseName <- "sample_mflix"
collectionName <- "movies"
db <- mongo(collection = collectionName,
url = options()$mongodb$url,
db = databaseName)
runApp()
runApp()
sliderValues <- reactive({
data.frame(
Name = c("min_rating"),
Value = c(input$rating)
)
})
sliderValues <- reactive({
data.frame(
Name = c("min_rating"),
Value = c(input$rating)
)
})
sliderValues
sliderValues$min_rating
runApp()
runApp()
runApp()
runApp()
df
data.frame("A" = c(1,2,3), "B" = c(4,5,6))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
test.head/()
test.head()
head(test)
View(test)
res["title","imdb.rating"]
test["title","imdb.rating"]
test[["title","imdb.rating"]
]
test[["title","imdb.rating"]]
test$title
test$["title"]
test$[["title"]]
test[["title"]]
test[[c("title","imdb.rating")]]
test[["title","imdb.rating"]]
test %>% select(title,imdb.rating)
library(mongolite)
library(dplyr)
test %>% select(title,imdb.rating)
test %>% select(title,"imdb.rating")
test %>% select("title","imdb.rating")
test %>% select(title)
test %>% select(title,imdb)
test %>% select(title,imdb.rating)
test %>% select(title,imdb.rating)
test %>% select(title,imdb)
test %>% select(title,imdb.rating) %>% head
test %>% head %>%  select(title,imdb.rating)
test %>% head %>%  select(title,imdb)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
test
test[order(test["imdb"])]
test[order(test$imdb)]
test[order(test$imdb$rating)]
test[order(test$imdb$rating),]
test %>% head %>% select(title,imdb) %>% arrange(desc(test$imdb$rating))
test %>% head %>% select(title,imdb) %>% arrange(desc(imdb$rating))
query <- paste0('{"imdb.rating":{{"$gte":',rating(),'},{$lte:',lower_rating(),'}}}')
query
query <- paste0('{"imdb.rating":{{"$gte":',3,'},{$lte:',6,'}}}')
query
db.find(query)
db$find(quzery)
db$find(query)
query <- paste0('{"imdb.rating":{{"$gte":',3,'},{"$lte":',6,'}}}')
db$find(query)
query <- paste0('{"imdb.rating":{$and:[{"$gte":',3,'},{"$lte":',5,'}}]}')
query
db$find(query)
query <- paste0('{"imdb.rating":{"$and":[{"$gte":',3,'},{"$lte":',5,'}}]}')
db$find(query)
query <- paste0('{"$and":[{"imdb.rating":{"$gte":',lower(),'}},{"imdb.rating":{"$lte":',upper(),'}}]}')
query <- paste0('{"$and":[{"imdb.rating":{"$gte":',2,'}},{"imdb.rating":{"$lte":',5,'}}]}')
query
db$find(query)
runApp()
runApp()
runApp()
query <- paste0('{"$and":[{"imdb.rating":{"$gte":',2,'}},{"imdb.rating":{"$lte":',5,'}}]}')
query
runApp()
db$find('{"$and":[{"imdb.rating":{"$gte":2}},{"imdb.rating":{"$lte":5}}]}')
test = {"$and":[{"imdb.rating":{"$gte":2}},{"imdb.rating":{"$lte":5}}]}
test <- db$find('{"$and":[{"imdb.rating":{"$gte":2}},{"imdb.rating":{"$lte":5}}]}')
test %>% head %>%  select(title,imdb$rating) %>% arrange(desc(imdb$rating))
test %>% head %>%  select(title,imdb) %>% arrange(desc(imdb$rating))
runApp()
runApp()
runApp()
runApp()
install.packages("DT")
library(shiny)
library(mongolite)
library(dplyr)
library(DT)
runApp()
runApp()
test
test$imdb
test %>% select(imdb)
test %>% select(imdb[1])
test %>% select(imdb)
type(test %>% select(imdb))
x <- test %>% select(imdb)
x
typeof(x)
x[0]
x[1]
x[2]
x[1]
x[1]$imdb
x[1]$imdb$rating
test$imdb
cbind(test$imdb)
test2 = cbind(test$imdb,test$title)
test2
runApp()
test %>% cbind(title)
test2 <- test %>% select(title,imdb)
test2
test2 %>% arrange(desc(imdb$rating))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
test2
test2 <- test %>% select(title,imdb)
head(test2)
test2$imdb.rating
test2$imdb$rating
runApp()
test %>% select(imdb)
test %>% select(imdb$rating)
test %>% select(imdb.rating)
test %>% select("imdb")
test %>% select("imdb.rating")
test %>% select("imdb.")
test %>% select("imdb")
test %>% unnest()
test %>% unnest
unnest(test)
install.packages("tidyr")
library(tidyr)
unnest(test)
test$imdb
unnest(test$imdb)
test %>% select(title,imdb) %>% unnest()
test %>% select(title,imdb) %>% unnest(imdb)
test %>%  unnest(imdb, .drop=FALSE)
unnest(test$imdb)
cbind(test$title,unnest(test$imdb))
runApp()
test$imdb
runApp()
runApp()
test$imdb
query
query <- paste0('{{"$and":[{"imdb.rating":{"$gte":',lower(),'}},{"imdb.rating":{"$lte":',upper(),'}}]},{"title":1,"imdp.rating":1}}')
query <- paste0('{{"$and":[{"imdb.rating":{"$gte":',3,'}},{"imdb.rating":{"$lte":',5,'}}]},{"title":1,"imdp.rating":1}}')
query
runApp()
runApp()
aggregation <- paste0('[{"$match": {
"$and": [{"imdb.rating": {"$gte": 3}},{"imdb.rating":{"$lte": 5}}]
}}, {"$project": {
"title":1,
"rating": "$imdb.rating"
}}]')
res <- db$aggregate(query)
aggregation <- paste0('[{"$match": {"$and": [{"imdb.rating": {"$gte": 3}},{"imdb.rating":{"$lte": 5}}]}}, {"$project": {"title":1,"rating": "$imdb.rating"}}]')
res <- db$aggregate(aggregation)
res
res <- res %>% arrange(desc(rating))
res
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinyalert")
library(shinyalert)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
clear
cls
empty
runApp()
aggregation <- paste0('
[{"$match": {
"$and": [
{
"monthly_price": {"$exists": "true"}
},
{
"review_scores.review_scores_value": {"$exists":"true"}
}
]
}}, {"$project": {
"monthly_rent": "$monthly_price",
"bed_type": "$bed_type",
"beds": "$beds",
"bathrooms": "$bathrooms",
"no_amenities": {$size: "$amenities"},
"review_score": "$review_scores.review_scores_value"
}}]'
)
aggregation
runApp()
res <- db$aggregate(aggregation)
aggregation <- paste0('
[{"$match": {
"$and": [
{
"monthly_price": {"$exists": true}
},
{
"review_scores.review_scores_value": {"$exists":true}
}
]
}}, {"$project": {
"monthly_rent": "$monthly_price",
"bed_type": "$bed_type",
"beds": "$beds",
"bathrooms": "$bathrooms",
"no_amenities": {$size: "$amenities"},
"review_score": "$review_scores.review_scores_value"
}}]'
)
res <- db$aggregate(aggregation)
options(mongodb = list(
"username" = "Julian",
"password" = "Julian1994",
"url" = "mongodb+srv://Julian:Julian1994@cluster0-hfwvj.mongodb.net/test?retryWrites=true&w=majority"
))
#mongolite - macht aus jeder Zeile des Dataframes ein Dokument
# -> dabei werden Listen zu Arrays, nested Documents werden nicht eingesetzt
databaseName <- "sample_mflix"
collectionName <- "movies"
db <- mongo(collection = collectionName,
url = options()$mongodb$url,
db = databaseName)
#Data Analytics & Viz
aggregation <- paste0('
[{"$match": {
"$and": [
{"monthly_price": {"$exists": "true"}},
{"review_scores.review_scores_value": {"$exists":"true"}}
]
}}, {"$project": {
"monthly_rent": "$monthly_price",
"bed_type": "$bed_type",
"beds": "$beds",
"bathrooms": "$bathrooms",
"no_amenities": {$size: "$amenities"},
"review_score": "$review_scores.review_scores_value"
}}]'
)
res <- db$aggregate(aggregation)
aggregation <- paste0('
[{"$match": {
"$and": [
{"monthly_price": {"$exists": "true"}},
{"review_scores.review_scores_value": {"$exists":"true"}}
]
}}, {"$project": {
"monthly_rent": "$monthly_price",
"bed_type": "$bed_type",
"beds": "$beds",
"bathrooms": "$bathrooms",
"no_amenities": {"$size": "$amenities"},
"review_score": "$review_scores.review_scores_value"
}}]'
)
res <- db$aggregate(aggregation)
res
#Data Analytics & Viz
analyticsDatabaseName <- "sample_airbnb"
analyticsCollectionName <- "listingsAndReviews"
analytics_db <- mongo(collection = analyticsCollectionName,
url = options()$mongodb$url,
db = analyticsDatabaseName)
aggregation <- paste0('
[{"$match": {
"$and": [
{"monthly_price": {"$exists": "true"}},
{"review_scores.review_scores_value": {"$exists":"true"}}
]
}}, {"$project": {
"monthly_rent": "$monthly_price",
"bed_type": "$bed_type",
"beds": "$beds",
"bathrooms": "$bathrooms",
"no_amenities": {"$size": "$amenities"},
"review_score": "$review_scores.review_scores_value"
}}]'
)
res <- analytics_db$aggregate(aggregation)
res
install.packages("rpart")
runApp()
runApp()
runApp()
runApp()
beds <- range(beds_lower,beds_upper,step=1)
range(0,5,1)
range(c(0,5),1)
range(c(0,5,1))
seq(0,5,by=1)
beds = seq(0,5,by=1)
review = seq(5,10,by=1)
expand.grid(beds = beds, reviews = reviews)
expand.grid(beds = beds, reviews = review)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
expand.grid(beds = beds, reviews = reviews)
expand.grid(beds = beds, reviews = review)
runApp()
runApp()
runApp()
runApp()
install.packages("scatterplot3d")
runApp()
runApp()
runApp()
runApp()
runApp()
prices
test
shape(test)
dim(test)
dim(test)[1]
dim(test)[1]2
dim(test)[2]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
